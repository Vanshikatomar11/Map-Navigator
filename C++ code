#include <iostream>
#include <climits>
#include <vector>
using namespace std;

#define V 9 //number of vertices on the campus graph

int minDistance(vector<int>& distance, vector<bool>& sptSet) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++) {
        if (!sptSet[v] && distance[v] < min) {
            min = distance[v];
            min_index = v;
        }
    }
    return min_index;
}

void printPath(vector<int>& parent, int i) {
    if (parent[i] == -1)
        return;
    printPath(parent, parent[i]);
    cout << "-> " << i;
}

void printSolution(vector<int>& distance, vector<int>& parent, int source) {
    cout << "Vertex \t Distance from Source \t Path \n";
    for (int j = 0; j < V; j++) {
        cout << source << " -> " << j << " \t\t " << distance[j] << " \t\t " << source;
        printPath(parent, j);
        cout << endl;
    }
}

void dijkstra(vector<vector<int>>& graph, int source) {
    vector<int> distance(V, INT_MAX);
    vector<bool> sptSet(V, false);
    vector<int> parent(V, -1);

    distance[source] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(distance, sptSet);
        sptSet[u] = true;

        for (int v = 0; v < V; v++) {
            if (!sptSet[v] && graph[u][v] && distance[u] != INT_MAX && distance[u] + graph[u][v] < distance[v]) {
                distance[v] = distance[u] + graph[u][v];
                parent[v] = u;
            }
        }
    }
    printSolution(distance, parent, source);
}

int main() {
    vector<vector<int>> graph = {
        {0, 4, 0, 0, 0, 0, 0, 8, 0},
        {4, 0, 8, 0, 0 ,0 ,0, 11, 0},
        {0, 8, 0, 7, 0, 4, 0, 0, 2},
        {0, 0, 7, 0, 9, 14, 0, 0, 0},
        {0, 0, 0, 9, 0, 10, 0, 0, 0},
        {0, 0, 4, 14, 10, 0, 2, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 1, 6},
        {8, 11, 0, 0, 0, 0, 1, 0, 7},
        {0, 0, 2, 0, 0, 0, 6, 7, 0}
    };
    int src = 0;
    dijkstra(graph, src);
    return 0;
}
